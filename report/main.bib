@article{ownShortPaper,
  author={Stucki, Simon and Ackermann, Philipp},
  journal={Proceedings WEB3D '24: The 29th International ACM Conference on 3D Web Technology}, 
  title={Physically-based Path Tracer using WebGPU and OpenPBR}, 
  year={2024},
  doi={10.1145/3665318.3677158}
}

@article{flynnTaxonomy,
  author={Flynn, Michael J.},
  journal={Proceedings of the IEEE}, 
  title={Very high-speed computing systems}, 
  year={1966},
  volume={54},
  number={12},
  pages={1901-1909},
  keywords={Computer aided instruction;Large-scale systems;Impedance matching;Art;Scientific computing;Arithmetic;Pervasive computing;Hardware;Turing machines},
  doi={10.1109/PROC.1966.5273}
}

@ARTICLE{flynnTaxonomy2,
  author={Flynn, Michael J.},
  journal={IEEE Transactions on Computers}, 
  title={Some Computer Organizations and Their Effectiveness}, 
  year={1972},
  volume={C-21},
  number={9},
  pages={948-960},
  keywords={Organizations;Computers;Entropy;Computational modeling;Data mining;Probability density function;Bandwidth;Computer organization;instruction stream;overlapped;parallel processors;resource hierarchy},
  doi={10.1109/TC.1972.5009071}}


@phdthesis{surfaceAlgorithmProcessor,
  author = {Watkins, Gary Scott},
  title = {A real time visible surface algorithm},
  year = {1970},
  publisher = {The University of Utah},
  note = {AAI7023061}
}

@article{chapSIMDgpu,
  author = {Levinthal, Adam and Porter, Thomas},
  title = {Chap - a SIMD graphics processor},
  year = {1984},
  issue_date = {July 1984},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {18},
  number = {3},
  issn = {0097-8930},
  url = {https://doi.org/10.1145/964965.808581},
  doi = {10.1145/964965.808581},
  abstract = {Special purpose processing systems designed for specific applications can provide extremely high performance at moderate cost. One such processor is presented for executing graphics and image processing algorithms as the basis of a digital film printer. Pixels in the system contain four parallel components: RGB for full color and an alpha channel for retaining transparency information. The data path of the processor contains four arithmetic elements connected through a crossbar network to a tessellated scratchpad memory. The single instruction, multiple data stream (SIMD) processor executes instructions on four pixel components in parallel. The instruction control unit (ICU) maintains an activity stack for tracking block-structured code, using data-dependent activity flags for conditional disabling subsets of the ALUs. Nested loops and if-then-else constructs can be programmed directly, with the ICU disabling and reenabling ALUs on the basis of their individual status bits.},
  journal = {SIGGRAPH Comput. Graph.},
  month = {jan},
  pages = {77–82},
  numpages = {6},
  keywords = {Tesselation, SIMD architecture, Parallel processing, Digital film printers, Computer graphics, Compositing}
}

@ARTICLE{sigWorkstation,
  author={Akeley, K.},
  journal={IEEE Computer Graphics and Applications}, 
  title={The Silicon Graphics 4D/240GTX superworkstation}, 
  year={1989},
  volume={9},
  number={4},
  pages={71-83},
  keywords={Silicon;Computer graphics;Displays;Monitoring;Workstations;Computer architecture;Hardware;Pixel;Supercomputers;Central Processing Unit},
  doi={10.1109/38.31466}
}

@inproceedings{appel1968shading,
    author = {Appel, Arthur},
    title = {Some techniques for shading machine renderings of solids},
    year = {1968},
    isbn = {9781450378970},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/1468075.1468082},
    doi = {10.1145/1468075.1468082},
    abstract = {Some applications of computer graphics require a vivid illusion of reality. These include the spatial organization of machine parts, conceptual architectural design, simulation of mechanisms, and industrial design. There has been moderate success in the automatic generation of wire frame, cardboard model, polyhedra, and quadric surface line drawings. The capability of the machine to generate vivid sterographic pictures has been demonstrated. There are, however considerable reasons for developing techniques by which line drawings of solids can be shaded, especially the enhancement of the sense of solidity and depth. Figures 1 and 2 illustrate the value of shading and shadow casting in spatial description. In the line drawing there is no clue as to the relative position of the flat plane and the sheet metal console. When shadows are rendered, it is clear that the plane is below and to the rear of the console, and the hollow nature of the sheet metal assembly is emphasized. Shading can specify the tone or color of a surface and the amount of light falling upon that surface from one or more light sources. Shadows when sharply defined tend to suggest another viewpoint and improves surface definition. When controlled, shading can also emphasize particular parts of the drawing. If techniques for the automatic determination of chiaroscuro with good resolution should prove to be competitive with line drawings, and this is a possibility, machine generated photographs might replace line drawings as the principal mode of graphical communication in engineering and architecture.},
    booktitle = {Proceedings of the April 30--May 2, 1968, Spring Joint Computer Conference},
    pages = {37–45},
    numpages = {9},
    location = {Atlantic City, New Jersey},
    series = {AFIPS '68 (Spring)}
}

@book{fowles1989introduction,
  title={Introduction to modern optics},
  author={Fowles, Grant R},
  year={1989},
  publisher={Courier Corporation}
}

@article{bmrt,
    author = {Larry Gritz and James K. Hahn},
    title = {BMRT: A Global Illumination Implementation of the RenderMan Standard},
    journal = {Journal of Graphics Tools},
    volume = {1},
    number = {3},
    pages = {29--47},
    year = {1996},
    publisher = {Taylor \& Francis},
    doi = {10.1080/10867651.1996.10487462},
    URL = {https://doi.org/10.1080/10867651.1996.10487462},
}

@Manual{POV_Ray_Documentation,
  title = {POV-Ray: Documentation},
  author = {{POV-Ray Team}},
  url = {https://www.povray.org/documentation/view/3.6.1/10/},
}

@TechReport{RenderMan_11_Release_Notes,
    title = {RenderMan 11 Release Notes},
    author = {Pixar},
    type = {Technical Report},
    url = {https://renderman.pixar.com/resources/RenderMan_20/rnotes-11.0.html},
}

@article{rubinWhittedBvh,
  author = {Rubin, Steven M. and Whitted, Turner},
  title = {A 3-dimensional representation for fast rendering of complex scenes},
  year = {1980},
  issue_date = {July 1980},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {14},
  number = {3},
  issn = {0097-8930},
  url = {https://doi.org/10.1145/965105.807479},
  doi = {10.1145/965105.807479},
  abstract = {Hierarchical representations of 3-dimensional objects are both time and space efficient. They typically consist of trees whose branches represent bounding volumes and whose terminal nodes represent primitive object elements (usually polygons). This paper describes a method whereby the object space is represented entirely by a hierarchical data structure consisting of bounding volumes, with no other form of representation. This homogencity allows the visible surface rendering to be performed simply and efficiently.The bounding volumes selected for this algorithm are parallelepipeds oriented to minimize their size. With this representation, any surface can be rendered since in the limit the bounding volumes make up a point representation of the object. The advantage is that the visibility calculations consist only of a search through the data structure to determine the correspondence between terminal level bounding volumes and the current pixel. For ray tracing algorithms, this means that a simplified operation will produce the point of intersection of each ray with the bounding volumes.Memory requirements are minimized by expanding or fetching the lower levels of the hierarchy only when required. Because the viewing process has a single operation and primitive type, the software or hardware chosen to implement the search can be highly optimized for very fast execution.},
  journal = {SIGGRAPH Comput. Graph.},
  month = {jul},
  pages = {110–116},
  numpages = {7},
  keywords = {Visible surface algorithms, Object descriptions, Hierarchical data structures, Computer graphics}
}

@inproceedings{lauterbach2009GPUbvh,
  title={Fast BVH construction on GPUs},
  author={Lauterbach, Christian and Garland, Michael and Sengupta, Shubhabrata and Luebke, David and Manocha, Dinesh},
  booktitle={Computer Graphics Forum},
  volume={28},
  number={2},
  pages={375--384},
  year={2009},
  organization={Wiley Online Library}
}

@inproceedings{whittedGlobalIllumination,
  author = {Whitted, Turner},
  title = {An improved illumination model for shaded display},
  year = {1979},
  isbn = {0897910044},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/800249.807419},
  doi = {10.1145/800249.807419},
  abstract = {To accurately render a scene, global illumination information that affects the intensity of each pixel of the image must be known at the time the intensity is calculated. In a simplified form, this information is stored in a tree of “rays” extending from the viewer to the first surface encountered and from there to other surfaces and to the light sources. The visible surface algorithm creates this tree for each pixel of the display and passes it to the shader. The shader then traverses the tree to determine the intensity of the light received by the viewer. Consideration of all of these factors allows the shader to accurately simulate true reflection, shadows, and refraction as well as the effects simulated by conventional shaders. Anti-aliasing is included as an integral part of the visibility calculations. Surfaces displayed include curved as well as polygonal surfaces.},
  booktitle = {Proceedings of the 6th Annual Conference on Computer Graphics and Interactive Techniques},
  pages = {14},
  keywords = {Computer animation, Computer graphics, Raster displays, Shading, Visible surface algorithms},
  location = {Chicago, Illinois, USA},
  series = {SIGGRAPH '79}
}

@article{whitted2020OriginsOfGlobalIllumination,
    author={Whitted, Turner},
    journal={IEEE Computer Graphics and Applications}, 
    title={Origins of Global Illumination}, 
    year={2020},
    volume={40},
    number={1},
    pages={20-27},
    keywords={Lighting;Reflection;Ray Tracing},
    doi={10.1109/MCG.2019.2957688}
}

@inproceedings{kajiya1986rendering,
  title={The rendering equation},
  author={Kajiya, James T.},
  booktitle={Proceedings of the 13th annual conference on Computer graphics and interactive techniques},
  pages={143--150},
  year={1986}
}

@book{veachMonteCarloLightTransport,
    place={Stanford, Calif},
    title={Robust Monte Carlo Methods for Light Transport Simulation},
    publisher={Stanford University, Department of Computer Science},
    author={Veach, Eric},
    year={1998}
}

@article{restir,
author = {Bitterli, Benedikt and Wyman, Chris and Pharr, Matt and Shirley, Peter and Lefohn, Aaron and Jarosz, Wojciech},
title = {Spatiotemporal reservoir resampling for real-time ray tracing with dynamic direct lighting},
year = {2020},
issue_date = {August 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {39},
number = {4},
issn = {0730-0301},
url = {https://doi.org/10.1145/3386569.3392481},
doi = {10.1145/3386569.3392481},
abstract = {Efficiently rendering direct lighting from millions of dynamic light sources using Monte Carlo integration remains a challenging problem, even for off-line rendering systems. We introduce a new algorithm---ReSTIR---that renders such lighting interactively, at high quality, and without needing to maintain complex data structures. We repeatedly resample a set of candidate light samples and apply further spatial and temporal resampling to leverage information from relevant nearby samples. We derive an unbiased Monte Carlo estimator for this approach, and show that it achieves equal-error 6\texttimes{}-60\texttimes{} faster than state-of-the-art methods. A biased estimator reduces noise further and is 35\texttimes{}-65\texttimes{} faster, at the cost of some energy loss. We implemented our approach on the GPU, rendering complex scenes containing up to 3.4 million dynamic, emissive triangles in under 50 ms per frame while tracing at most 8 rays per pixel.},
journal = {ACM Trans. Graph.},
month = {aug},
articleno = {148},
numpages = {17},
keywords = {reservoir sampling, resampled importance sampling, real-time rendering, photorealistic rendering}
}


@article{restirAdvancements,
author = {Ouyang, Y. and Liu, S. and Kettunen, M. and Pharr, M. and Pantaleoni, J.},
title = {ReSTIR GI: Path Resampling for Real-Time Path Tracing},
journal = {Computer Graphics Forum},
volume = {40},
number = {8},
pages = {17-29},
keywords = {CCS Concepts, • Computing methodologies → Rendering, Ray tracing},
doi = {https://doi.org/10.1111/cgf.14378},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1111/cgf.14378},
abstract = {Abstract Even with the advent of hardware-accelerated ray tracing in modern GPUs, only a small number of rays can be traced at each pixel in real-time applications. This presents a significant challenge for path tracing, even when augmented with state-of-the art denoising algorithms. While the recently-developed ReSTIR algorithm [BWP∗20] enables high-quality renderings of scenes with millions of light sources using just a few shadow rays at each pixel, there remains a need for effective algorithms to sample indirect illumination. We introduce an effective path sampling algorithm for indirect lighting that is suitable to highly parallel GPU architectures. Building on the screen-space spatio-temporal resampling principles of ReSTIR, our approach resamples multi-bounce indirect lighting paths obtained by path tracing. Doing so allows sharing information about important paths that contribute to lighting both across time and pixels in the image. The resulting algorithm achieves a substantial error reduction compared to path tracing: at a single sample per pixel every frame, our algorithm achieves MSE improvements ranging from 9.3× to 166× in our test scenes. In conjunction with a denoiser, it leads to high-quality path traced global illumination at real-time frame rates on modern GPUs.},
year = {2021}
}

@article{restirGeneralized,
  title={Generalized resampled importance sampling: Foundations of restir},
  author={Lin, Daqi and Kettunen, Markus and Bitterli, Benedikt and Pantaleoni, Jacopo and Yuksel, Cem and Wyman, Chris},
  journal={ACM Transactions on Graphics (TOG)},
  volume={41},
  number={4},
  pages={1--23},
  year={2022},
  publisher={ACM New York, NY, USA}
}

@book{luebke2003level,
  title={Level of detail for 3D graphics},
  author={Luebke, David},
  year={2003},
  publisher={Morgan Kaufmann}
}

@misc{nvidiaDlss,
  author = {NVIDIA Corporation},
  title = {NVIDIA DLSS},
  url = {https://www.nvidia.com/en-us/geforce/technologies/dlss/},
}

@misc{nvidiaRtxRayTracing,
  author = {NVIDIA Corporation},
  title = {NVIDIA RTX Ray Tracing},
  url = {https://developer.nvidia.com/rtx/ray-tracing},
  lastaccessed = "July 10, 2024",
}

@misc{appleM3GpuAdvancements,
  author = "Apple Developer",
  title = "Explore GPU advancements in M3 and A17 Pro - Tech Talks",
  url = "https://developer.apple.com/videos/play/tech-talks/111375",
  year = {2023},
  lastaccessed = "July 10, 2024",
}

@article{greene1986environment,
  title={Environment mapping and other applications of world projections},
  author={Greene, Ned},
  journal={IEEE computer graphics and Applications},
  volume={6},
  number={11},
  pages={21--29},
  year={1986},
  publisher={IEEE}
}

@article{bavoil2008ssao,
  title={Screen space ambient occlusion},
  author={Bavoil, Louis and Sainz, Miguel},
  journal={NVIDIA developer information: http://developer.nvidia.com},
  volume={6},
  number={2},
  year={2008}
}

@inproceedings{screenSpaceReflectionsStackowiak,
  author = {Stachowiak, Tomasz},
  title = {Advances in real time rendering, part I, Stochastic Screen-Space Reflections},
  year = {2015},
  isbn = {9781450336345},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/2776880.2787701},
  doi = {10.1145/2776880.2787701},
  booktitle = {ACM SIGGRAPH 2015 Courses},
  articleno = {1},
  location = {Los Angeles, California},
  series = {SIGGRAPH '15}
}

@Inbook{hybridRenderingBarreBrisebois2019,
  author="Barr{\'e}-Brisebois, Colin
  and Hal{\'e}n, Henrik
  and Wihlidal, Graham
  and Lauritzen, Andrew
  and Bekkers, Jasper
  and Stachowiak, Tomasz
  and Andersson, Johan",
  editor="Haines, Eric
  and Akenine-M{\"o}ller, Tomas",
  title="Hybrid Rendering for Real-Time Ray Tracing",
  bookTitle="Ray Tracing Gems: High-Quality and Real-Time Rendering with DXR and Other APIs",
  year="2019",
  publisher="Apress",
  address="Berkeley, CA",
  pages="437--473",
  abstract="This chapter describes the rendering pipeline developed for PICA PICA, a real-time ray tracing experiment featuring self-learning agents in a procedurally assembled world. PICA PICA showcases a hybrid rendering pipeline in which rasterization, compute, and ray tracing shaders work together to enable real-time visuals approaching the quality of offline path tracing.",
  isbn="978-1-4842-4427-2",
  doi="10.1007/978-1-4842-4427-2_25",
  url="https://doi.org/10.1007/978-1-4842-4427-2_25"
}

@inproceedings{gautron2020rtao,
  author = {Gautron, Pascal},
  title = {Real-Time Ray-Traced Ambient Occlusion of Complex Scenes using Spatial Hashing},
  year = {2020},
  isbn = {9781450379717},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3388767.3407375},
  doi = {10.1145/3388767.3407375},
  abstract = {Ambient occlusion is often approximated in real-time using screen-space techniques, leading to visible artifacts. Raytracing provides a unique way to increase the rendering fidelity by accurately sampling the distance to the surrounding objects, but it introduces sampling noise. We propose a real-time ray-traced ambient occlusion technique in which noise is filtered in world space. Using extended spatial hashing for efficient storage, multiresolution AO evaluation and ad-hoc filtering, we demonstrate the usability of our technique as a production feature usable in CAD viewports with scenes comprising hundreds of millions of polygons.},
  booktitle = {ACM SIGGRAPH 2020 Talks},
  articleno = {5},
  numpages = {2},
  location = {Virtual Event, USA},
  series = {SIGGRAPH '20}
}

@inproceedings{ritschel2009ssdo,
  author = {Ritschel, Tobias and Grosch, Thorsten and Seidel, Hans-Peter},
  title = {Approximating dynamic global illumination in image space},
  year = {2009},
  isbn = {9781605584294},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/1507149.1507161},
  doi = {10.1145/1507149.1507161},
  abstract = {Physically plausible illumination at real-time framerates is often achieved using approximations. One popular example is ambient occlusion (AO), for which very simple and efficient implementations are used extensively in production. Recent methods approximate AO between nearby geometry in screen space (SSAO). The key observation described in this paper is, that screen-space occlusion methods can be used to compute many more types of effects than just occlusion, such as directional shadows and indirect color bleeding. The proposed generalization has only a small overhead compared to classic SSAO, approximates direct and one-bounce light transport in screen space, can be combined with other methods that simulate transport for macro structures and is visually equivalent to SSAO in the worst case without introducing new artifacts. Since our method works in screen space, it does not depend on the geometric complexity. Plausible directional occlusion and indirect lighting effects can be displayed for large and fully dynamic scenes at real-time frame rates.},
  booktitle = {Proceedings of the 2009 Symposium on Interactive 3D Graphics and Games},
  pages = {75–82},
  numpages = {8},
  keywords = {radiosity, global illumination, constant time},
  location = {Boston, Massachusetts},
  series = {I3D '09}
}

@article{remoteRendering,
  author = {Shi, Shu and Hsu, Cheng-Hsin},
  title = {A Survey of Interactive Remote Rendering Systems},
  year = {2015},
  issue_date = {July 2015},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {47},
  number = {4},
  issn = {0360-0300},
  url = {https://doi.org/10.1145/2719921},
  doi = {10.1145/2719921},
  abstract = {Remote rendering means rendering 3D graphics on a computing device and displaying the results on another computing device connected through a network. The concept was originally developed for sharing computing resources remotely. It has been receiving increasing attention from researchers in both academia and industry in recent years due to the proliferation of cloud computing and mobile devices. In this article, we survey the interactive remote rendering systems proposed in the literature, analyze how to improve the state of the art, and summarize the related technologies. The readers of this article will understand the history of remote rendering systems and obtain some inspirations of the future research directions in this area.},
  journal = {ACM Comput. Surv.},
  month = {may},
  articleno = {57},
  numpages = {29},
  keywords = {video streaming, distributed rendering, cloud rendering, cloud games, QoS, QoE, Cloud computing}
}

@article{randomnessCryptography,
  author={Gennaro, Rosario},
  journal={IEEE Security \& Privacy}, 
  title={Randomness in cryptography}, 
  year={2006},
  volume={4},
  number={2},
  pages={64-67},
  keywords={Cryptography;Entropy;Random processes;Application software;Computer science;Computer security;Privacy;randomness;predictable;cryptography;nonce},
  doi={10.1109/MSP.2006.49}
}

@online{cloudflareLavaRand,
  title = {LavaRand in Production},
  author = {Liebow-Feeser, Joshua},
  month = {June},
  year = {2017},
  url = {https://blog.cloudflare.com/randomness-101-lavarand-in-production},
  lastaccessed = "June 27, 2024",
}

@article{rngMersenneTwister,
    author = {Matsumoto, Makoto and Nishimura, Takuji},
    title = {Mersenne twister: a 623-dimensionally equidistributed uniform pseudo-random number generator},
    year = {1998},
    issue_date = {Jan. 1998},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {8},
    number = {1},
    issn = {1049-3301},
    url = {https://doi.org/10.1145/272991.272995},
    doi = {10.1145/272991.272995},
    abstract = {A new algorithm called Mersenne Twister (MT) is proposed for generating uniform pseudorandom numbers. For a particular choice of parameters, the algorithm provides a super astronomical period of 219937 −1 and 623-dimensional equidistribution up to 32-bit accuracy, while using a working area of only 624 words. This is a new variant of the previously proposed generators, TGFSR, modified so as to admit a Mersenne-prime period. The characteristic polynomial has many terms. The distribution up to v bits accuracy for 1 ≤ v ≤ 32 is also shown to be good. An algorithm is also given that checks the primitivity of the characteristic polynomial of MT with computational complexity O(p2) where  p is the degree of the polynomial.We implemented this generator in portable C-code. It passed several stringent statistical tests, including diehard. Its speed is comparable to other modern generators. Its merits are due to the efficient algorithms that are unique to polynomial calculations over the two-element field.},
    journal = {ACM Trans. Model. Comput. Simul.},
    month = {jan},
    pages = {3–30},
    numpages = {28},
    keywords = {k-distribution, m-sequences, GFSR, MT19937, Mersenne primes, Mersenne twister, TGFSR, finite fields, incomplete array, inversive-decimation method, multiple-recursive matrix method, primitive polynomials, random number generation, tempering}
}

@article{marsaglia2003xorshift,
    title={Xorshift rngs},
    author={Marsaglia, George},
    journal={Journal of Statistical software},
    volume={8},
    pages={1--6},
    year={2003}
}

@article{o2014pcg,
  title={PCG: A family of simple fast space-efficient statistically good algorithms for random number generation},
  author={O'Neill, Melissa E.},
  journal={ACM Transactions on Mathematical Software},
  year={2014}
}

@mastersthesis{dotson2022dynamicaljs,
    title = {Dynamical.JS: A composable framework for online exploratory visualization of arbitrarily-complex multivariate networks},
    author = {Dotson, Robert L.},
    school = {Harvard University Division of Continuing Education},
    year = {2022}
}


@article{Bohak_Kovalskyi_Linev_Mrak_Tadel_Strban_Tadel_Yagil_2024,
    title={RenderCore – a new WebGPU-based rendering engine for Root-eve},
    volume={295},
    DOI={10.1051/epjconf/202429503035},
    journal={EPJ Web of Conferences},
    author={Bohak, Ciril and Kovalskyi, Dmytro and Linev, Sergey and Mrak Tadel, Alja and Strban, Sebastien and Tadel, Matevž and Yagil, Avi},
    year={2024},
    pages={03035}
}

@article{kimmersdorfer2023webgpu,
    title={WebGPU for Scalable Client-Side Aggregate Visualization},
    author={Kimmersdorfer, Gerald and Wolf, Dominik and Waldner, Manuela},
    journal={Proceedings of Eurographics - The European Association for Computer Graphics},
    year={2023},
    pages={1--3},
    publisher={The European Association for Computer Graphics}
}

@article{webGPUWebGis,
  AUTHOR = {Usta, Ziya},
  TITLE = {WebGPU: A new Graphic API for 3D WebGIS Applications},
  JOURNAL = {The International Archives of the Photogrammetry, Remote Sensing and Spatial Information Sciences},
  VOLUME = {XLVIII-4/W9-2024},
  YEAR = {2024},
  PAGES = {377--382},
  URL = {https://isprs-archives.copernicus.org/articles/XLVIII-4-W9-2024/377/2024/},
  DOI = {10.5194/isprs-archives-XLVIII-4-W9-2024-377-2024}
}

@article{fransson2023performance,
  title = {Performance comparison of WebGPU and WebGL in the Godot game engine},
  author = {Fransson, Emil and Hermansson, Jonatan},
  year = {2023},
  url = {https://urn.kb.se/resolve?urn=urn:nbn:se:bth-24706},
  type = {Dissertation}
}

@article{CHICKERUR2024919,
    title = {WebGL vs. WebGPU: A Performance Analysis for Web 3.0},
    journal = {Procedia Computer Science},
    volume = {233},
    pages = {919-928},
    year = {2024},
    note = {5th International Conference on Innovative Data Communication Technologies and Application (ICIDCA 2024)},
    issn = {1877-0509},
    doi = {https://doi.org/10.1016/j.procs.2024.03.281},
    url = {https://www.sciencedirect.com/science/article/pii/S1877050924006410},
    author = {Satyadhyan Chickerur and Sankalp Balannavar and Pranali Hongekar and Aditi Prerna and Soumya Jituri},
    keywords = {WebGL, WebGPU, Rendering, Performance analysis, Web3.0},
    abstract = {This study investigates web 3.0 heterogeneous computing with webGL, webGPU, and IPFS. The primary focus is on the benefits of utilising these technologies to enhance the functionality and performance of web 3.0 applications. The study investigates web 3.0 as it currently exists and the constraints that developers face due to graphic, computational, and storage capabilities. According to the findings, incorporating webGL and webGPU can considerably increase user experience, speed, efficacy, and decentralization. Finally, this study summarizes the importance of continuing research in this subject, particularly with relation to platform interoperability and the future prospects of heterogeneous computing on web 3.0 via graphical APIs.}
}

@Book{Pharr_Physically_Based_Rendering_2023,
  title = {Physically Based Rendering: From Theory to Implementation},
  author = {Pharr, Matt and Jakob, Wenzel and Humphreys, Greg},
  year = {2023},
  publisher = {The MIT Press}
}

@book{lambert1760photometria,
  title={Photometria},
  author={Lambert, Johann Heinrich},
  year={1760}
}

@Inbook{ipr,
  author="Stjepandi{\'{c}}, Josip
  and Liese, Harald
  and Trappey, Amy J. C.",
  editor="Stjepandi{\'{c}}, Josip
  and Wognum, Nel
  and J.C. Verhagen, Wim",
  title="Intellectual Property Protection",
  bookTitle="Concurrent Engineering in the 21st Century: Foundations, Developments and Challenges",
  year="2015",
  publisher="Springer International Publishing",
  address="Cham",
  pages="521--551",
  abstract="With the growth of the knowledge-based economy, intellectual property right (IPR) is recognized as a key factor to develop and protect strategic competitiveness and innovation of an enterprise. The increasing degree of collaboration in global relationships, ubiquitous digital communication techniques as well as tough competition has lead to an increasing importance of intellectual property protection (IPP) for enterprises. Since the law as well as ethical principles are not always adhered to, there are increasingly activities outside legal understanding. This situation is exacerbated in the context of rising crime through the misuse of modern ICT technologies (``Cyber Crime'') and now employs extensively state authorities. Piracy, counterfeits and unwanted know-how drain pose a significant problem for each market leader. Intellectual property is stored in product data too. Especially modern parametric and feature-based 3D-CAD systems have been enhanced towards acquiring, representing, processing and distributing knowledge to support knowledge-based engineering (KBE) within virtual product creation. However, it is very easy to exchange huge amounts of product data within a virtual enterprise that comprises an enterprise with its supplier network. There is an enormous threat that intellectual property could fall into the wrong hands and badly jeopardize the existence of the related company. This chapter contains an analysis of this conflict area, a picture of the legal framework, a discussion on the need for action in supply chain networks and attempts by research and development as well as best practices in industry for various aspects of IPP in the context of concurrent engineering (CE).",
  isbn="978-3-319-13776-6",
  doi="10.1007/978-3-319-13776-6_18",
  url="https://doi.org/10.1007/978-3-319-13776-6_18"
}

@inproceedings{marjudi2010StepIgesreview,
  title={A Review and Comparison of IGES and STEP},
  author={Marjudi, Suziyanti and Amran, MF Mohd and Abdullah, Khairul Annuar and Widyarto, Setyawan and Majid, NA Abdul and Sulaiman, Riza},
  booktitle={Proceedings Of World Academy Of Science, Engineering And Technology},
  volume={62},
  pages={1013--1017},
  year={2010}
}

@inproceedings{cloudLatency,
  title={Surrounded by the Clouds},
  author={Corneo, Lorenzo and Eder, Maximilian and Mohan, Nitinder and Zavodovski, Aleksandr and BayhanZ, Suzan},
  booktitle={The Web Conference},
  year={2021}
}

@inproceedings{oren1994generalization,
  title={Generalization of Lambert's reflectance model},
  author={Oren, Michael and Nayar, Shree K},
  booktitle={Proceedings of the 21st annual conference on Computer graphics and interactive techniques},
  pages={239--246},
  year={1994}
}

@online{Harrysson2019,
  title = {MaterialX Physically-Based Shading Nodes Introduction},
  author = {Harrysson, Niklas and Smythe, Doug and Stone, Jonathan},
  month = {July},
  year = {2019},
  url = {https://materialx.org/assets/MaterialX.v1.37REV2.PBRSpec.pdf},
  lastaccessed = "May 10, 2024",
}

@techreport{openPBRSpec,
  author = {Zap Andersson and Paul Edmondson and Julien Guertault and Adrien Herubel and Alan King and Peter Kutz and Andréa Machizaud and Jamie Portsmouth and Frédéric Servant and Jonathan Stone},
  title = {{O}pen{PBR} {S}urface Specification},
  institution = {Academy Software Foundation ({ASWF})},
  year = {2024},
  url = {https://academysoftwarefoundation.github.io/OpenPBR/}
}

@online{openPBR1Dot0Release,
  author = {{Academy Software Foundation (ASWF)}},
  title = {Academy Software Foundation Releases OpenPBR 1.0},
  month= {June},
  year = {2024},
  url = {https://www.aswf.io/blog/academy-software-foundation-releases-openpbr-1-0/},
  lastaccessed = "July 14, 2024",
}

@online{omniverseOpenPBR,
  author = {Langlands, Anders},
  title = {Unlock Seamless Material Interchange for Virtual Worlds with OpenUSD, MaterialX, and OpenPBR},
  month = {March},
  year = {2024},
  url = {https://developer.nvidia.com/blog/unlock-seamless-material-interchange-for-virtual-worlds-with-openusd-materialx-and-openpbr/},
  lastaccessed = "July 14, 2024",
}

@online{blenderOpenPBRInspiration,
  author = {Langlands, Anders},
  title = {Unlock Seamless Material Interchange for Virtual Worlds with OpenUSD, MaterialX, and OpenPBR},
  month = {November},
  year = {2023},
  url = {https://docs.blender.org/manual/en/4.0/render/shader_nodes/shader/principled.html},
  lastaccessed = "July 14, 2024",
}

@online{SafariWebGPUSupport,
  title = {WebGPU now available for testing in Safari Technology Preview},
  author = {Wyrzykowski, Mike},
  month = {December},
  year = {2023},
  url = {https://webkit.org/blog/14879/webgpu-now-available-for-testing-in-safari-technology-preview/},
  lastaccessed = "May 30, 2024",
}

@online{webKitWebGPUImplementation,
  title = {WebKit source WebGPU implementation},
  author = {Apple},
  month = {July},
  year = {2024},
  url = {https://github.com/WebKit/WebKit/tree/main/Source/WebGPU},
  lastaccessed = "July 26, 2024",
}

@online{FirefoxWebGPUSupport,
  title = {Mozilla Platform GFX WebGPU},
  author = {Mozilla},
  month = {April},
  year = {2023},
  url = {https://wiki.mozilla.org/Platform/GFX/WebGPU},
  lastaccessed = "May 30, 2024",
}

@online{wgpuImplementation,
  title = {wgpu source code},
  author = {gfx-rs},
  month = {July},
  year = {2024},
  url = {https://github.com/gfx-rs/wgpu},
  lastaccessed = "July 26, 2024",
}

@online{wgpuStandardDeviation,
  title = {Differences between our subgroup implementation and the WebGPU proposal},
  author = {gfx-rs},
  month = {April},
  year = {2024},
  url = {https://github.com/gfx-rs/wgpu/issues/5555},
  lastaccessed = "July 26, 2024",
}

@online{ChromeWebGPUSupport,
  title = {Chrome Platform Status: WebGPU},
  author = {Google},
  month = {April},
  year = {2023},
  url = {https://chromestatus.com/feature/6213121689518080},
  lastaccessed = "May 30, 2024",
}

@online{ChromeAndroidWebGPUSupport,
  title = {Chrome Platform Status: WebGPU on Android},
  author = {Google},
  month = {January},
  year = {2024},
  url = {https://chromestatus.com/feature/5119617865613312},
  lastaccessed = "May 30, 2024",
}

@online{dawnImplementation,
  title = {Dawn source code},
  author = {Google},
  month = {July},
  year = {2024},
  url = {https://dawn.googlesource.com/dawn},
  lastaccessed = "July 26, 2024",
}

@online{BabylonJSWebGPUSupport,
  title = {WebGPU Support},
  author = {Babylon.js},
  month = {October},
  year = {2022},
  url = {https://doc.babylonjs.com/setup/support/webGPU},
  lastaccessed = "May 30, 2024",
}

@online{ThreeJSWebGPUSupport,
  title = {Three.js WebGPURenderer.js},
  author = {{Three.js}},
  month = {January},
  year = {2024},
  url = {https://github.com/mrdoob/three.js/blob/de367cb2e866d4ffc9bd4b23dddd137a93ee65ba/examples/jsm/renderers/webgpu/WebGPURenderer.js},
  lastaccessed = "May 30, 2024",
}

@online{playCanvasWebGPUSupport,
  title = {Initial WebGPU support lands in PlayCanvas Engine 1.62},
  author = {Valigursky, Martin},
  month = {March},
  year = {2023},
  url = {https://blog.playcanvas.com/initial-webgpu-support-lands-in-playcanvas-engine-1-62/},
  lastaccessed = "May 30, 2024",
}

@online{UnityWebGPUSupport,
  title = {Web runtime updates are here: Take your browser to the next level},
  author = {Craven, Ben and Buscemi, Matthew and Bowker, Anthony},
  month = {November},
  year = {2023},
  url = {https://blog.unity.com/engine-platform/web-runtime-updates-enhance-browser-experience},
  lastaccessed = "May 30, 2024",
}

@online{WebGPUConformanceTestSuite,
  title = {WebGPU Conformance Test Suite},
  author = {{W3C group for GPU web standards}},
  month = {May},
  year = {2024},
  url = {https://github.com/gpuweb/cts},
  lastaccessed = "May 30, 2024",
}

@online{openPbrViewer,
  title = {OpenPBR-viewer},
  author = {Portsmouth, Jamie},
  month = {June},
  year = {2024},
  url = {https://github.com/portsmouth/OpenPBR-viewer},
  lastaccessed = "July 16, 2024",
}

@online{threeMeshBvh,
  title = {three-mesh-bvh},
  author = {Johnson, Garrett},
  month = {July},
  year = {2024},
  url = {https://github.com/gkjohnson/three-mesh-bvh},
  lastaccessed = "July 13, 2024",
}

@online{webgpuUtilsLib,
  title = {webgpu-utils},
  author = {Tavares, Gregg},
  month = {July},
  year = {2024},
  url = {https://github.com/greggman/webgpu-utils},
  lastaccessed = "July 26, 2024",
}

@online{pathTracerWallace,
  title = {WebGL Path Tracing},
  author = {Wallace, Evan},
  month = {August},
  year = {2011},
  url = {https://experiments.withgoogle.com/webgl-path-tracing},
  lastaccessed = "May 30, 2024",
}

@online{ThreeJsPathTracerJohnson,
  title = {three-gpu-pathtracer},
  author = {Johnson, Garrett},
  month = {May},
  year = {2024},
  url = {https://github.com/gkjohnson/three-gpu-pathtracer},
  lastaccessed = "May 30, 2024",
}

@online{ThreeJsPathTracerLoftis,
  title = {THREE.js-PathTracing-Renderer},
  author = {Loftis, Erich},
  month = {May},
  year = {2024},
  url = {https://github.com/erichlof/THREE.js-PathTracing-Renderer},
  lastaccessed = "May 30, 2024",
}

@online{PathTracerDassault,
  title = {dspbr-pt},
  author = {Sdorra, Bastian and Häußler, Tobias},
  month = {July},
  year = {2022},
  url = {https://github.com/DassaultSystemes-Technology/dspbr-pt},
  lastaccessed = "May 30, 2024",
}

@online{vulkanRayTracing,
  title = {Vulkan SDK, Tools and Drivers are Ray Tracing Ready},
  author = {{Khronos Group}},
  month = {December},
  year = {2020},
  url = {https://www.khronos.org/news/press/vulkan-sdk-tools-and-drivers-are-ray-tracing-ready},
  lastaccessed = "Jul 25, 2024",
}

@online{webGPURayTracing,
  title = {Ray Tracing extension},
  author = {{W3C group for GPU web standards}},
  month = {January},
  year = {2020},
  url = {https://github.com/gpuweb/gpuweb/issues/535},
  lastaccessed = "Jul 25, 2024",
}

@online{webGPURayTracingFork,
  title = {Hardware Ray tracing extension for Chromium WebGPU},
  author = {Maier, Felix},
  month = {September},
  year = {2020},
  url = {https://github.com/maierfelix/dawn-ray-tracing},
  lastaccessed = "Jul 25, 2024",
}
